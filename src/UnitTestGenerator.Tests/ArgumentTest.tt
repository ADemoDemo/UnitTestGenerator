<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ Assembly Name="$(SolutionDir)UnitTestGenerator\bin\Debug\UnitTestGenerator.dll" #>
<#@ Assembly Name="$(SolutionDir)UnitTestGenerator.DynamicProxy\bin\Debug\UnitTestGenerator.DynamicProxy.dll" #>
<#@ Assembly Name="$(SolutionDir)UnitTestGenerator.Integration\bin\Debug\UnitTestGenerator.Integration.dll" #>
<#@ Assembly Name="$(SolutionDir)TestAssembly\bin\Debug\TestAssembly.dll" #>
<#@ import namespace="UnitTestGenerator" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="UnitTestGenerator.DynamicProxy" #>
<#@ import namespace="UnitTestGenerator.CodeGeneration" #>
<#@ import namespace="UnitTestGenerator.UnitTestGeneration" #>
<#@ import namespace="UnitTestGenerator.CodeGeneration.Generators" #>
<#@ import namespace="UnitTestGenerator.Integration" #>

<#@ output extension=".cs" #>
<#@ assembly name="EnvDte" #>
<#@ import namespace="EnvDTE" #>
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Net;
using System.Collections.Generic;
using System.Reflection;
using UnitTestGenerator.DynamicProxy;
using System.Linq.Expressions;
using UnitTestGenerator.Tests;
using UnitTestGenerator.UnitTestGeneration;
using UnitTestGenerator.CodeGeneration;
using UnitTestGenerator.CodeGeneration.Generators;
<#
    var dte = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
    var currentProject = dte.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;

    var generator = typeof(UnitTestGenerator.TestClassBuilder).Assembly
                .Scan(currentProject.Name, new CastleMockProvider(), new AutoFixtureValueExpressionProvider(), configure => configure
                        .UseBuiltinGenerators()
                        .Excluding(typeof(TestClass))
                        .WithDefaultValues(new LambdaExpression [] {
                            (Expression<Func<MemberInfo>>)(() => typeof(string).GetMethods()[0]),
                            (Expression<Func<MethodInfo>>)(() => typeof(string).GetMethods()[0]),
                            (Expression<Func<ConstructorInfo>>)(() => typeof(string).GetConstructors()[0]),
                            (Expression<Func<Type>>)(() => typeof(string)),
                            (Expression<Func<Assembly>>)(() => typeof(string).Assembly),
                            (Expression<Func<LambdaExpression>>)(() => (Expression<Func<string>>)(() => string.Empty)),
                            
                            })
                        .ParameterTypeMapping(new Dictionary<Type, string> {
                             { typeof(AssemblyTraverser), "testee"  } 
                        })
);
    foreach(var testClass in generator.BuildTestClasses())
    {
#>

        namespace <#= TranslateNamespace(testClass.TestedType.Namespace) #>
        {
            [TestClass]
            public partial class <#= testClass.TestedType.Name #>Tests
            {
<#      
        foreach(var method in testClass.Methods)
        {
                var lines = method.SourceCode.Split(new [] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
#>
                [TestMethod]
                [TestCategory("UnitTestGenerator.ArgumentCheck")]
<#
            if (method.ShouldThrowException != null)
            { #>
                [ExpectedException(typeof(<#= method.ShouldThrowException.FullName #>))]
<#            }
#>
                public void <#=method.Name#>()
                {
<#          foreach (var line in lines)
            { #>
                    <#= line #>		 
<#          }#>
                }

<#
        }
                #>
            }
        }
<#
    }
    

#>
<#+

    string TranslateNamespace(string nSpace)
    {
        return nSpace.Replace("UnitTestGenerator", "UnitTestGenerator.Tests");
    }

#>